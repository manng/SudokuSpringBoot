package sudoku.io;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.json.Json;
import javax.json.stream.JsonParser;
import javax.json.stream.JsonParsingException;
import javax.json.stream.JsonParser.Event;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.Attribute;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;

import org.apache.commons.io.input.ReaderInputStream;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import sudoku.exceptions.InvalidInputDataException;
import sudoku.exceptions.InvalidJSONFileException;
import sudoku.exceptions.UnknownXMLElementException;
import sudoku.generated.Cells;
import sudoku.items.Cell;
import sudoku.items.Constraints;
import sudoku.util.FileFormat;

public class Input {

/**
 * This method reads the initial constraint values from a text file 
 * and stores them in a Constraints object.
 *
 * @param reader                    the Reader object containing the input file
 * @return                          Constraints object storing the initial
 *                                  constraint values
 * @throws FileNotFoundException    thrown if the no file with this filename
 *                                  can be found
 * @throws IOException              thrown if any IOException is generated by
 *                                  the file handling
*/
    public static Constraints initializeConstraintsFromTextFile(final Reader reader)
    throws FileNotFoundException, IOException {
	        	
 		BufferedReader input = new BufferedReader(reader);
   		String inLine;
   		inLine = input.readLine();
   		int dim = Integer.parseInt(inLine);
   		Constraints constraints = new Constraints(dim);
        Set<Cell> cells = new HashSet<Cell>();
   		inLine = input.readLine();
   		int y=0;
   		while (inLine != null){
   			String[] stringValues = inLine.split(",");
   			for (int x = 0; x < stringValues.length; x++) {
   				int value = Integer.parseInt(stringValues[x].trim());
   				if (value>0) {
   					Cell cell = new Cell(x,y);
   					Set<Integer> values = new HashSet<Integer>();
   					values.add(new Integer(value));
   					cell.setValues(values);
   					cells.add(cell);
   				}
   			}
   			y++;
   			inLine = input.readLine();
   		}
   		input.close();
        constraints.setCells(cells);
  		return constraints;
    }
	    
/**
 * This method reads the initial constraint values from an XML file 
 * and stores them in a Constraints object. It uses the Java DOM API.
 * 
 * This method is an alternative to initializeConstraintsFromXmlFileJAXB.  It is slightly
 * longer than the JAXB alternative, but is not much more complicated.
 * 
 * @param reader      the Reader object containing the input file
 * @return            Constraints object storing the initial constraint values
 * 
 * @throws ParserConfigurationException 
 * @throws IOException 
 * @throws SAXException 
*/
    public static Constraints initializeConstraintsFromXmlFileDOM(final Reader reader) 
    throws ParserConfigurationException, SAXException, IOException {
     	Constraints constraints = null;
        Set<Cell> cells = new HashSet<Cell>();
    	
		// Build a DOM.
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		dbf.setNamespaceAware(true);
		DocumentBuilder db = dbf.newDocumentBuilder();
		ReaderInputStream inputStream = new ReaderInputStream(reader, "UTF-8");
		Document doc = db.parse(inputStream);
		
		Element root = doc.getDocumentElement();
		String dimString = root.getAttribute(IOConstants.DIM_KEY);
		int dim = Integer.parseInt(dimString);
		constraints = new Constraints(dim);
		NodeList nodeList = root.getElementsByTagName(IOConstants.CELL_KEY);
		for (int i=0;i<nodeList.getLength();i++){
			Element element = (Element) nodeList.item(i);
			int x = Integer.parseInt(element.getAttribute(IOConstants.X));
			int y = Integer.parseInt(element.getAttribute(IOConstants.Y));
			int value = Integer.parseInt(element.getAttribute(IOConstants.VALUE));
			//if value is not zero, store it in a Cell with the current coordinates and add this to the Cells set
			if (value != 0) {
				Cell cell = new Cell(x,y);
				Set<Integer> values = new HashSet<Integer>();
				values.add(new Integer(value));
				cell.setValues(values);
				cells.add(cell);
			}
		}
	    //update the Constrains object with the Cells set
	    constraints.setCells(cells);
	    return constraints;
	}
    
/**
 * This method reads the initial constraint values from an XML file 
 * and stores them in a Constraints object. It uses the JAXB API.
 * 
 * This method is an alternative to initializeConstraintsFromXmlFileDOM.  It makes use
 * of the generated Cell and Cells classes as well as the native classes.
 * 
 * @param reader                    the Reader object containing the input file
 * @return                          Constraints object storing the initial
 *                                  constraint values
 * @throws JAXBException 
 * @throws ParserConfigurationException 
 * @throws IOException 
 * @throws SAXException 
*/
    public static Constraints initializeConstraintsFromXmlFileJAXB(final Reader reader) 
    throws JAXBException, ParserConfigurationException, SAXException, IOException{
    	Constraints constraints = null;
        Set<Cell> cells = new HashSet<Cell>();
		JAXBContext jc = JAXBContext.newInstance("sudoku.generated");
			
		ReaderInputStream inputStream = new ReaderInputStream(reader, "UTF-8");
		Source source = new StreamSource(inputStream);
		Unmarshaller u = jc.createUnmarshaller();

		// Unmarshal 'Cells'
			
		JAXBElement<Cells> cellsRoot = u.unmarshal(source, Cells.class);
		int dim = cellsRoot.getValue().getDim().intValue();
		constraints = new Constraints(dim);
			
		List<sudoku.generated.Cell> cellList = cellsRoot.getValue().getCell();
		for (sudoku.generated.Cell generatedCell : cellList) {
			int x = generatedCell.getX().intValue();
			int y = generatedCell.getY().intValue();
			int value = generatedCell.getValue().intValue();
			if (value != 0) {
				Cell cell = new Cell(x,y);
				Set<Integer> values = new HashSet<Integer>();
				values.add(new Integer(value));
				cell.setValues(values);
				cells.add(cell);
			}
		}
        constraints.setCells(cells);
    	return constraints;
    }
   
/**
 * This method reads the initial constraint values from an XML file 
 * and stores them in a Constraints object. It uses the StAX API.
 * 
 * This method has been deprecated in favour of initializeConstraintsFromXmlFileDOM and 
 * initializeConstraintsFromXmlFileJAXB, which are both much shorter and easier to follow.
 *
 * @deprecated
 * @param reader                    the Reader object containing the input file
 * @return                          Constraints object storing the initial
 *                                  constraint values
 * @throws XMLStreamException		thrown if an error occurs during reading the XML file
 *                                  can be found
 * @throws IOException              thrown if any IOException is generated by
 *                                  the file handling
 * @throws UnknownXMLElementException  thrown if the XML file contains an unrecognized element
 * @throws InvalidInputDataException   thrown if the XML file contains a non-integer element for a constraint value
*/
    public static Constraints initializeConstraintsFromXmlFileStax(final Reader reader)
    throws IOException, XMLStreamException, UnknownXMLElementException, InvalidInputDataException {
    	Constraints constraints = null;
        Set<Cell> cells = new HashSet<Cell>();
    	int dim;
    	//loop through all elements in the file
    	XMLEventReader eventReader = XMLInputFactory.newInstance().createXMLEventReader(reader);
    	while (eventReader.hasNext()){
    		XMLEvent event = eventReader.nextEvent();
    		if (event.getEventType() == XMLStreamConstants.START_ELEMENT) {
    			//get name and attributes of current element
    			StartElement startElement = event.asStartElement();
    			String elementName = startElement.getName().getLocalPart();
				Iterator<?> attributes = startElement.getAttributes();
				//handle current element based on its name
    			switch (elementName) {
    			//root element "Cells" - contains the "dim" attribute
    			case IOConstants.CELLS_KEY:
    				while (attributes.hasNext()){
    					Attribute attribute = (Attribute) attributes.next();
    					String attributeName = attribute.getName().getLocalPart();
    					if (IOConstants.DIM_KEY.equals(attributeName)) {
    						String dimString = attribute.getValue();
    						dim = Integer.parseInt(dimString);
     						constraints = new Constraints(dim);
    					} else {
    						throw new UnknownXMLElementException("Unknown attribute " + attributeName + " found in <Cells>.");
    					}
    				}
    				break;
    			//many elements "Cell" - contains the x- and y-coordinates and the constraint value
    			case IOConstants.CELL_KEY:
    				int x = 0;
    				int y = 0;
    				int value = 0;
    				//read attribute values of current element
    				while (attributes.hasNext()){
    					Attribute attribute = (Attribute) attributes.next();
    					String attributeName = attribute.getName().getLocalPart();
    					if (IOConstants.X.equals(attributeName)){
    						try {
    							x = Integer.parseInt(attribute.getValue());
    						} catch (NumberFormatException nfe) {
    							throw new InvalidInputDataException("Non-integer value " + attribute.getValue() + " found for x coordinate");
    						}
    					} else if (IOConstants.Y.equals(attributeName)) {
    						try {
    							y = Integer.parseInt(attribute.getValue());
    						} catch (NumberFormatException nfe) {
    							throw new InvalidInputDataException("Non-integer value " + attribute.getValue() + " found for y coordinate");
    						}
    					} else if (IOConstants.VALUE.equals(attributeName)) {
    						try {
    							value = Integer.parseInt(attribute.getValue());
    						} catch (NumberFormatException nfe) {
    							throw new InvalidInputDataException("Non-integer value " + attribute.getValue() + " found at cell x = " + x + " y = " + y);
    						}
    					} else {
    						throw new UnknownXMLElementException("Unknown attribute " + attributeName + " found in <Cell>.");
    					}
    				}
    				//if value is not zero, store it in a Cell with the current coordinates and add this to the Cells set
    				if (value != 0) {
    					Cell cell = new Cell(x,y);
    					Set<Integer> values = new HashSet<Integer>();
    					values.add(new Integer(value));
    					cell.setValues(values);
    					cells.add(cell);
    				}
    				break;
    			//any other element is an error
    			default:
    				throw new UnknownXMLElementException("Unknown element <" + elementName + "> found.");
    			}
    		}
    	}
    	//update the Constrains object with the Cells set
        constraints.setCells(cells);
    	return constraints;
    }
	    
/**
 * This method reads the initial constraint values from a JSON file and stores them
 * in a Constraints object. It uses the Jackson API for JSON mapping. 
 * 
 * This method replaces initializeConstraintsFromJsonFile().  It is shorter
 * and easier to understand than that method.
 *
 * @param reader                    a Reader object containing the input file
 * @return                          Constraints object storing the initial constraint values
 * @throws JsonParsingException     thrown if the JSON file is contains unknown keys
 * @throws InvalidJSONFileException thrown if the input JSON file is incorrectly structured
 * @throws IOException				thrown if error in reading input data
 * @throws NullPointerException		thrown if one of the constraint entries is null
*/
 //   @SuppressWarnings("deprecation")
	public static Constraints initializeConstraintsFromJsonFileJackson(final Reader reader) 
    throws JsonParseException, JsonMappingException, IOException, InvalidJSONFileException, NullPointerException {
    	Constraints constraints = null;
        Set<Cell> cells = new HashSet<Cell>();
        ObjectMapper mapper = new ObjectMapper();
        Map<String, Object> props = mapper.readValue(new JsonFactory().createParser(reader), 
        		                                     new TypeReference<Map<String, Object>>(){});
        int dim = ((Integer) props.get(IOConstants.DIM_KEY));
        int dimSq = dim * dim;
        constraints = new Constraints(dim);
        @SuppressWarnings("unchecked")
		List<List<Integer>> valuesArray = (List<List<Integer>>) props.get(IOConstants.CELLS_KEY);
        if (valuesArray.size() > dimSq)
        	throw new InvalidJSONFileException("Constraint matrix has too many rows.");
        if (valuesArray.size() < dimSq)
        	throw new InvalidJSONFileException("Constraint matrix has too few rows.");
        int y = -1;
        int x = -1;
        for (List<Integer> list : valuesArray) {
        	y++;
        	if (list.size() > dimSq)
        		throw new InvalidJSONFileException("Row " + y + " has too many values.");
        	if (list.size() < dimSq)
        		throw new InvalidJSONFileException("Row " + y + " has too few values");
        	for (Integer value : list) {
        		x++;
        		if (value.intValue() != 0){
					Cell cell = new Cell(x,y);
					Set<Integer> values = new HashSet<Integer>();
					values.add(new Integer(value.intValue()));
					cell.setValues(values);
					cells.add(cell);
        		}
        	}
        	x = -1;
        }
        constraints.setCells(cells);
    	return constraints;
    }
	    
	    
/**
 * This method reads the initial constraint values from a JSON file 
 * and stores them in a Constraints object. It uses the Streaming API
 * for JSON (JSON-P). 
 * 
 * @deprecated	Use intializeConstraintsFromJsonFileJackson instead.
 *
 * @param reader                    a Reader object containing the input file
 * @return                          Constraints object storing the initial
 *                                  constraint values
 * @throws InvalidJSONFileException thrown if the JSON file is contains unknown keys
 * @throws JsonParsingException		thrown if the input JSON file is incorrectly structured
*/
    public static Constraints initializeConstraintsFromJsonFileJSONP(final Reader reader) 
    throws InvalidJSONFileException, JsonParsingException {
    	Constraints constraints = null;
        Set<Cell> cells = new HashSet<Cell>();
        JsonParser parser = Json.createParser(reader);
        int dim = 0;
        int dimSq = 0;
    	while (parser.hasNext()){
    		Event event = parser.next();
    		if (event == Event.KEY_NAME) {
    			String keyName = parser.getString();
    			switch (keyName) {
    			case IOConstants.DIM_KEY:
    				parser.next();
    				dim = parser.getInt();
    				dimSq = dim * dim;
					constraints = new Constraints(dim);
    				break;
    			case IOConstants.CELLS_KEY:
    				parser.next();
    				int x = -1;
    				int y = -1;
    				while (parser.hasNext()){
    					Event event2 = parser.next();
    					switch (event2){
    					case START_ARRAY: 
    						y++;
    						break;
    					case VALUE_NUMBER: 
    						x++;
    						String valString = parser.getString();
    						int value = 0;
    						try {
    							value = Integer.parseInt(valString);
    						} catch (NumberFormatException nfe) {
    							throw new InvalidJSONFileException("Non-integer value " + valString + " found at x = " + x + " y = " + y);
    						}
    						if (value != 0) {
    							Cell cell = new Cell(x,y);
    							Set<Integer> values = new HashSet<Integer>();
    							values.add(new Integer(value));
    							cell.setValues(values);
    							cells.add(cell);
    						}
    						break;
    					case END_ARRAY:
    						if (x >= dimSq) {
    							throw new InvalidJSONFileException("Row " + y + " has too many values.");
    						}
    						if ((x > 0) && (x < (dimSq-1))){
    							throw new InvalidJSONFileException("Row " + y + " only has " + (x+1) + " values.");
    						} else {
    							x = -1;
    						}
    						break; 
    					case END_OBJECT:
    						if (y < (dimSq-1)){
    							throw new InvalidJSONFileException("Only found " + (y + 1) + " rows.");
    						}
    						//do nothing, end of loop
    						break;
    					default:
    						throw new InvalidJSONFileException("Unrecognized Key " + parser.getString() + " found in JSON file.");
     					}
    				}
    				break;
    			default:
    				//do nothing
    				break;
    			}
    		}
    	}
        constraints.setCells(cells);
    	return constraints;
    }
	    
/**
 * This method reads the initial constraint values from a text, JSON or XML file 
 * and stores them in a Constraints object.
 * 
 * This method calls sub-methods to handle the input processing for JSON, XML and text formats.  There are several
 * alternative methods for JSON and XML processing.  Not all the exceptions can be thrown by every input method.
 * The exception list for this method covers all the known exceptions for all possible sub-methods.
 *
 * @param reader                      a Reader object storing the the input file
 * @param inputFormat				  the format of the input file (XML, JSON or text)
 * @return                            Constraints object storing the initial
 *                                    constraint values
 * @throws IOException                thrown if any IOException is generated by
 *                                    the file handling
 * @throws XMLStreamException 		  thrown if the XML input file is invalid
 * @throws InvalidJSONFileException   thrown if the JSON input file is invalid
 * @throws UnknownXMLElementException thrown if XML input file contains an unrecognized element
 * @throws JsonParsingException		  thrown if the input JSON file is incorrectly structured
 * @throws InvalidInputDataException  thrown if the XML file contains a non-integer element for a constraint value
 * @throws SAXException 
 * @throws ParserConfigurationException 
 * @throws JAXBException 			  thrown if there is a JAXBException on input
 * @throws ParserConfigurationException
 * @throws NullPointerException		  thrown if one of the constraint entries is null
 */
    public static Constraints initializeConstraints(final Reader reader, final int inputFormat)
    throws IOException, XMLStreamException, InvalidJSONFileException, UnknownXMLElementException, 
           JsonParsingException, InvalidInputDataException, JsonParseException, JsonMappingException,
           JAXBException, ParserConfigurationException, SAXException, NullPointerException {
      	Constraints constraints = null;
      	switch (inputFormat) {
      	case FileFormat.XML:
      		constraints = initializeConstraintsFromXmlFileJAXB(reader);
      		break;
      	case FileFormat.JSON:
      		constraints = initializeConstraintsFromJsonFileJackson(reader);
      		break;
      	case FileFormat.TEXT:
      		constraints = initializeConstraintsFromTextFile(reader);
      		break;
      	}
        return constraints;
    }
	   
}
