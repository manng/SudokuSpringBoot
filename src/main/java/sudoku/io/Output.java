package sudoku.io;

import java.io.IOException;
import java.io.Writer;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;

import sudoku.generated.Cell;
import sudoku.generated.Cells;
import sudoku.items.Constraints;
import sudoku.util.FileFormat;
import sudoku.util.Utilities;

public class Output {

/**
 * This method saves the final result to an XML file using JAXB.
 * 
 * This method uses the Cell and Cells classes generated by JAXB.  It is an alternative to saveResultsToXMLFile.
 * For output JAXB does not make things any easier than basic Java writes.  Either method can be used, both
 * are simple.
 * 
 * @param solution          array storing the final solution
 * @param dim				the dimension of the problem (usually 3)
 * @param dimSq				the square of the dimension
 * @param writer            a Writer object to contain the output result
 * @throws JAXBException	any JAXBException thrown while writing the result to file
 */
	
	public static void saveResultsToXMLFileJAXB(final int[][] solution,
	 											final int dim,
	 											final int dimSq,
	 											Writer writer) throws JAXBException {
		Cells cells = new Cells();
		cells.setDim(BigInteger.valueOf(dim));
		for (int y=0;y<dimSq;y++){
			for (int x=0;x<dimSq;x++){
				Cell cell = new Cell();
				cell.setX(BigInteger.valueOf(x));
				cell.setY(BigInteger.valueOf(y));
				cell.setValue(BigInteger.valueOf(solution[y][x]));
				cells.getCell().add(cell);
			}
		}
		JAXBContext context = JAXBContext.newInstance(Cells.class);
		Marshaller m = context.createMarshaller();
		m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
		m.marshal(cells, writer);
		
	}


/**
 * This method saves the final result to an XML file.
 *
 * @param solution          array storing the final solution
 * @param dim				the dimension of the problem (usually 3)
 * @param dimSq				the square of the dimension
 * @param writer            a Writer object to contain the output result
 * @throws IOException      any IOException thrown during the file handling
 */ 
	public static void saveResultsToXMLFile(final int[][] solution,
									 		final int dim,
									 		final int dimSq,
									 		Writer writer) throws IOException {
		writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>");
		writer.write("\n");
		writer.write("<Cells dim='" + dim + "'>");
		writer.write("\n");
    	for (int y = 0; y <dimSq; y++){
    		for (int x = 0; x < dimSq; x++){
    			//we need to transpose output matrix to display it correctly
    			writer.write("<Cell x='" + x + "' y='" + y + "' value='" + solution[y][x] + "'/>");
    			writer.write("\n");
    		}
    	}
    	writer.write("</Cells>");
	}

/**
 * This method saves the final result to a JSON file using the Jackson API.
 * 
 * This method is an alternative to saveResultsToJsonFile().  It is 
 * shorter and easier to understand than saveResultsToJsonFile(), but
 * its output is not as human-readable.
 *
 * @param solution          array storing the final solution
 * @param dim				the dimension of the problem (usually 3)
 * @param dimSq				the square of the dimension
 * @param writer            a Writer object to containing the output result
 * @throws IOException      any IOException thrown during the file handling
*/ 
	public static void saveResultsToJsonFileJackson(final int[][] solution,
													final int dim,
													final int dimSq,
													Writer writer) throws IOException {
		List<List<Integer>> arrayValues = new ArrayList<List<Integer>>();
		for (int y=0;y<dimSq;y++){
			List<Integer> row = new ArrayList<Integer>();
			for (int x=0;x<dimSq;x++){
				row.add(new Integer(solution[y][x]));
			}
			arrayValues.add(row);
		}
		Map<String, Object> outputMap = new HashMap<String, Object>();
		outputMap.put(IOConstants.DIM_KEY, new Integer(dim));
		outputMap.put(IOConstants.CELLS_KEY, arrayValues);
        
		JsonFactory factory = new JsonFactory();
        ObjectMapper mapper = new ObjectMapper(factory);
        mapper.writerWithDefaultPrettyPrinter().writeValue(writer,  outputMap);
 	}
		
/**
 * This method saves the final result to a JSON file.
 * 
 * This method uses standard write methods.  It is harder to
 * understand than saveResultsToJsonFileJackson(), but its 
 * output is more human-readable.
 *
 * @param solution          array storing the final solution
 * @param dim				the dimension of the problem (usually 3)
 * @param dimSq				the square of the dimension
 * @param writer            a Writer object to containing the output result
 * @throws IOException      any IOException thrown during the file handling
*/ 
	public static void saveResultsToJsonFile(final int[][] solution,
			 						  		 final int dim,
			 						  		 final int dimSq,
			 						  		 Writer writer) throws IOException {
    	writer.write("{\"dim\":" + dim + ",");
    	writer.write("\n");
    	writer.write("\"Cells\":");
    	writer.write("\n");
    	writer.write("  [");
    	for (int x = 0; x < dimSq; x++) {
    		if (x == 0) {
    			writer.write("[");
    		} else {
    			writer.write("   [");
    		}
    		for (int y = 0; y < dimSq; y++) {
    			writer.write("" + solution[x][y]);
    			if (y == dimSq-1) {
    				writer.write("]");
    			} else {
    				writer.write(",");
    			}
    		}
    		if (x == dimSq-1) {
    			writer.write("]");
    		} else {
    			writer.write(",");
    		}
        	writer.write("\n");
    	}
    	writer.write("}");
	}

/**
 * This method saves the final result to a text file.
 *
 * @param solution          array storing the final solution
 * @param dim				the dimension of the problem (usually 3)
 * @param dimSq				the square of the dimension
 * @param writer            a Writer object to containing the output result
 * @throws IOException      any IOException thrown during the file handling
*/ 
	public static void saveResultsToTextFile(final int[][] solution,
			 						 		 final int dim,
			 						 		 final int dimSq,
			 						 		 Writer writer) throws IOException {
       	writer.write("" + dim);
    	writer.write("\n");
    	for (int x = 0; x < dimSq; x++) {
    		for (int y = 0; y < dimSq; y++) {
    			if (solution[x][y] < 10) {
    				writer.write(" " + solution[x][y] + " ");
    			} else {
    				writer.write(solution[x][y] + " ");
    			}
    			if (((y + 1) % dim) == 0) {
    				writer.write("  ");
    			}
    		}
    		if (((x + 1) % dim) == 0) {
     	    	writer.write("\n");
    		}
        	writer.write("\n");
    	}
	}

/**
 * This method saves the final result to a file.  Its third argument specifies which
 * format to use (XML, JSON or text).
 *
 * This method immediately converts the contents of the Constraints object into
 * an array, then calls an appropriate method to write the contents of the array to a file using a
 * BufferedWriter.  
 *
 * @param constraints       a Constraints object representing the final solution
 * @param writer            a Writer object containing the output file
 * @param outputFormat		the format of the output (XML, JSON or text)
 * @throws IOException      any IOException thrown during the file handling
 * @throws JAXBException 
*/ 
    public static void saveResultsToFile(final Constraints constraints,
    									 Writer writer,
                                         final int outputFormat) throws IOException, JAXBException {
        int[][] solution = Utilities.convertSolutionToArray(constraints);
        int dim = constraints.getDim();
        int dimSq = constraints.getDimSq();
        switch (outputFormat){
        case FileFormat.XML:
        	saveResultsToXMLFileJAXB(solution, dim, dimSq, writer);
        	break;
        case FileFormat.JSON:
        	saveResultsToJsonFile(solution, dim, dimSq, writer);
        	break;
        case FileFormat.TEXT:
        	saveResultsToTextFile(solution, dim, dimSq, writer);
        	break;
        }
    }
}
